import numpy as np
import plotly.graph_objects as go
import os
import webbrowser  # Import the webbrowser module
from pyvdwsurface import vdwsurface  # Import your vdwsurface function

def generate_vdw_surface_from_xyz(xyz_filepath, output_xyz_file=None, density=1.0, scale_factor=1.0, plot_filepath=None, open_plot=False, seed=None):
    """
    Generates VDW surface points from an XYZ file, saves them to a new XYZ file (optional),
    creates an interactive 3D plot using Plotly, and optionally opens the plot in a browser.

    Parameters:
        xyz_filepath (str): Path to the input XYZ file.
        output_xyz_file (str, optional): Path to save VDW surface points as XYZ. None to skip.
        density (float, optional): Density of points on the VDW surface. Defaults to 1.0.
        scale_factor (float, optional): Scale factor for VDW radii. Defaults to 1.0.
        plot_filepath (str, optional): Path to save Plotly plot as HTML. None to only show interactively.
        open_plot (bool, optional): If True, opens the plot in a web browser after saving. Defaults to False.
        seed (int, optional): Random seed for reproducible point generation. If None, uses random seed.

    Returns:
        numpy.ndarray: VDW surface points (n_surface_points, 3) or None on error.
    """

    try:
        with open(xyz_filepath, 'r') as f:
            lines = f.readlines()

        n_atoms = int(lines[0])
        comment = lines[1].strip()

        coordinates = []
        elements_str = []
        for line in lines[2:n_atoms + 2]:
            parts = line.strip().split()
            if len(parts) != 4:
                print(f"Warning: Invalid line format: {line.strip()}. Skipping atom.")
                continue
            element = parts[0]
            try:
                x, y, z = map(float, parts[1:4])
                coordinates.append([x, y, z])
                elements_str.append(element)
            except ValueError:
                print(f"Warning: Could not parse coordinates: {line.strip()}. Skipping atom.")
                continue

        if not coordinates:
            print(f"Error: No valid atoms found in XYZ file: {xyz_filepath}")
            return None

        atoms = np.array(coordinates)
        elements_bytes = [e.encode('utf-8') for e in elements_str]

    except FileNotFoundError:
        print(f"Error: XYZ file not found: {xyz_filepath}")
        return None
    except ValueError:
        print(f"Error: Could not parse atom count: {xyz_filepath}. File format issue.")
        return None
    except Exception as e:
        print(f"Error reading XYZ file: {xyz_filepath}. Error: {e}")
        return None

    try:
        surface_points = vdwsurface(atoms, elements=elements_bytes, density=density, scale_factor=scale_factor, seed=seed) # Pass seed
    except Exception as e:
        print(f"Error calculating VDW surface: {e}")
        return None

    if output_xyz_file:
        try:
            with open(output_xyz_file, 'w') as outfile:
                outfile.write(str(len(surface_points)) + '\n')
                outfile.write("VDW Surface Points generated by pyvdwsurface\n")
                for point in surface_points:
                    outfile.write(f"X {point[0]:.6f} {point[1]:.6f} {point[2]:.6f}\n")
            print(f"VDW surface points saved to: {output_xyz_file}")
        except Exception as e:
            print(f"Error saving XYZ file: {output_xyz_file}. Error: {e}")

    if surface_points.size > 0:
        fig = go.Figure(data=[go.Scatter3d(
            x=surface_points[:, 0],
            y=surface_points[:, 1],
            z=surface_points[:, 2],
            mode='markers',
            marker=dict(
                size=2,
                opacity=0.8
            )
        )])

        # Calculate max range for equal aspect ratio
        max_range = np.max(np.ptp(surface_points, axis=0))  # ptp = peak to peak (max-min)
        mid_x = (np.max(surface_points[:, 0]) + np.min(surface_points[:, 0])) / 2
        mid_y = (np.max(surface_points[:, 1]) + np.min(surface_points[:, 1])) / 2
        mid_z = (np.max(surface_points[:, 2]) + np.min(surface_points[:, 2])) / 2

        fig.update_layout(
            title='VDW Surface Points',
            scene=dict(
                xaxis_title='X (Å)',
                yaxis_title='Y (Å)',
                zaxis_title='Z (Å)',
                aspectratio=dict(x=1, y=1, z=1), # Force equal aspect ratio
                xaxis=dict(range=[mid_x-max_range/2, mid_x+max_range/2]),
                yaxis=dict(range=[mid_y-max_range/2, mid_y+max_range/2]),
                zaxis=dict(range=[mid_z-max_range/2, mid_z+max_range/2]),
            )
        )

        if plot_filepath:

            plot_filepath = plot_filepath.rsplit(".", 1)[0]
            html_filepath = plot_filepath + '.html'

            try:

                # Save as HTML
                fig.write_html(html_filepath)
                print(f"Plot saved to: {html_filepath}")

                if open_plot: # Open plot in browser if open_plot is True
                    webbrowser.open(html_filepath)

            except Exception as e:
                print(f"Error saving plot to HTML: {html_filepath}. Error: {e}")

            return surface_points

        else:
            fig.show()
            return surface_points

    else:
        print("Warning: No surface points were generated.")
        return np.array([])


if __name__ == '__main__':

    xyz_filepath = os.path.join("CAN.xyz")

    surface_points = generate_vdw_surface_from_xyz(
        xyz_filepath,
        output_xyz_file='vdw_surface_points.xyz',
        density=25.0,
        scale_factor=1.2,
        plot_filepath='vdw_surface_plot',
        open_plot=True, # Set open_plot to True to open the plot in browser
        seed=42 # Example seed value for reproducibility
    )

    if surface_points is not None and surface_points.size > 0:
        print(f"Generated {len(surface_points)} surface points.")
    else:
        print("VDW surface generation failed or no points generated.")
